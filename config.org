:DOC-CONFIG:
#+property: header-args :emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: Duramacs
#+author: Anouar Aissaoui
#+email: anouar.aissaoui@pm.me

** Introduction

Welcome to my emacs configuration ! I use emacs as my window manager and general
swiss-knife tools for development stuff I do behind a computer. This configuration
is heavily borrowed from [[gitlab.com/zzamboni/dot-doom]]. If you seek to learn how to
produce yourself a nice and tidy Orgified emacs configuration, I suggest you take
a look at his configuration. Oh and it's running using [[github.com/hlissner/doom-emacs]].

** Config file headers

We start by simply defining the standard headers used by the three files. These headers come from the initial files generated by =doom install=, and contain either some Emacs-LISP relevant indicators like =lexical-binding=, or instructions about the contents of the file.

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src
#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
#+html: </details>

** DOOM Modules

Our configuration begins with

#+begin_src emacs-lisp :tangle init.el
(doom! :completion
       company             ; the ultimate code completion backend
       (ivy +fuzzy +icons) ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       ;; doom-quit        ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode +github) ; ðŸ™‚
       ;;fill-column       ; a `fill-column' indicator
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides       ; highlighted indent columns
       ;;(ligatures +fira) ; ligatures and symbols to make your code pretty again
       minimap             ; show a map of the code on the side
       modeline            ; snazzy, Atom-inspired modeline, plus API
       nav-flash           ; blink cursor line after big motions
       neotree             ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       unicode             ; extended unicode support for various languages
       ;;vc-gutter         ; vcs diff in the fringe
       ;;vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (window-select +switch-window +numbers)       ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       zen                 ; distraction-free coding or writing

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       (format +onsave)    ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors    ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +ranger +icons) ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       ;;ibuffer           ; interactive buffer management
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe); tasing you for every semicolon you forget
       ;;spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;; debugger         ; FIXME stepping through code, to help you add bugs
       direnv
       (docker +lsp)
       editorconfig        ; let someone else argue about tabs vs spaces
       ein                 ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       gist                ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +eglot)
       magit               ; a git porcelain for Emacs
       make                ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf                 ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb                 ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       terraform           ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos); improve compatibility with macOS
       tty                 ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       (cc +lsp)           ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       (elixir +lsp)       ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       (json +lsp)         ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)   ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix                 ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org                 ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript ; javascript, but functional
       (python +lsp +poetry); beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       (rst +lsp)          ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust                ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp)          ; the tubes
       ;;yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       irc                 ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

** Font

#+begin_src emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "Cascadia Code" :size 15))
(setq doom-big-font (font-spec :family "Cascadia Code" :size 21))
#+end_src

** Identity

#+begin_src emacs-lisp :tangle config.el

;; TODO: Fetch identity from elsewhere
(setq user-full-name "Anouar Aissaoui"
      user-mail-address "tobia@crossbone.cc")
#+end_src

** EXWM

#+begin_src emacs-lisp :tangle packages.el
(package! exwm)
(package! exwm-edit)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(map! :leader
      (:prefix ("e" . "environment")
       :desc "Run command" "r" #'counsel-linux-app))
(map! :leader
      (:prefix ("e" . "environment")
       :desc "Lock" "l" #'(shell-command "betterlockscreen -l dimblur")))

(defun duramacs/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(defun duramacs/create-firefox-profile-after-new-project ()
  (start-process-shell-command "firefox" nil (concat "firefox -CreateProfile -no-remote " (projectile-project-name))))

(add-hook 'projectile-after-switch-project-hook 'duramacs/create-firefox-profile-after-new-project)

;;(defun duramacs/create-firefox-profile-on-new-project)

(use-package! exwm
  :ensure t
  :config
  (setq exwm-workspace-number 2)
  (setq exwm-input-global-keys
        `(
          ([?\s-r] . counsel-linux-app)
          ([?\s-w] . exwm-workspace-switch)
          ([?\s-s] . exwm-workspace-switch-to-buffer)
          ([?\s-w] . exwm-workspace-switch)
          ([?\s-q] . kill-current-buffer)
          ([?\s-h] . evil-window-left)
          ([?\s-j] . evil-window-bottom)
          ([?\s-k] . evil-window-top)
          ([?\s-l] . evil-window-right)
          ([?\s-d] . dired)
          ([?\s-m] . doom/window-maximize-buffer)
          ([?\s-c] . exwm-input-send-next-key)
          ([?\s- ] . find-file)
          ([C-s-return] . (lambda ()
                            (interactive)
                            (start-process-shell-command "firefox" nil (concat "firefox -P " projectile-project-name))))
          ([M-s-return] . (lambda ()
                            (interactive)
                            (start-process-shell-command "firefox" nil "firefox -P default")))
          ([s-return] . (lambda ()
                          (interactive)
                          (start-process-shell-command "alacritty" nil "alacritty")))
          ([?\s-p] . (lambda ()
                       (interactive)
                       (start-process-shell-command "lockscreen" nil "betterlockscreen -l dimblur")))
          ([XF86AudioMute] . (lambda ()
                               (interactive)
                               (start-process-shell-command "pulse" nil "pactl set-sink-mute @DEFAULT_SINK@ toggle")))
          ([XF86AudioLowerVolume] . (lambda ()
                                      (interactive)
                                      (start-process-shell-command "pulse" nil "pactl set-sink-volume @DEFAULT_SINK@ -5%")))
          ([XF86AudioRaiseVolume] . (lambda ()
                                      (interactive)
                                      (start-process-shell-command "pulse" nil "pactl set-sink-volume @DEFAULT_SINK@ +5%")))
          ([XF86AudioMicMute] . (lambda ()
                                  (interactive)
                                  (start-process-shell-command "pulse" nil "pactl set-source-mute @DEFAULT_SINK@ toggle")))
          ([XF86MonBrightnessDown] . (lambda ()
                                       (interactive)
                                       (start-process-shell-command "xbacklight" nil "light -U 20")))
          ([XF86MonBrightnessUp] . (lambda ()
                                     (interactive)
                                     (start-process-shell-command "xbacklight" nil "light -A 20")))
          ))
  (add-hook 'exwm-update-class-hook
            #'duramacs/exwm-update-class))

(use-package! exwm-edit)

(require 'exwm-randr)
(setq exwm-randr-workspace-monitor-plist '(0 "eDP-1" 1 "DP-1"))
(add-hook 'exwm-randr-screen-change-hook
          (lambda()
            (start-process-shell-command
             "xrandr" nil "xrandr --output DP-1 --right-of eDP-1 --auto")))
(exwm-randr-enable)

(if (getenv "XDG_RUNTIME_DIR")
    (exwm-init)
  (message "(Duramacs) Not in a X environment, EXWM is not initiated."))
#+end_src

** Appearance

#+begin_src emacs-lisp :tangle config.el
(set-frame-parameter (selected-frame) 'alpha '(87 . 65))
#+end_src
